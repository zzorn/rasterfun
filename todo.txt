List of tweaks to do and bugs to fix for Rasterfun.

NEW robust implementation
=========================

Implementation list:


General
* Parameters [DONE]
* Listen to objects in parameter values (e.g. gradient)


Preview
* Preview generation [DONE]
* Preview user interface with panning and zooming [DONE]
* Implement column and row arranger [DONE]

* Do not relayout on resizes, except for the first resize, and while the user has not yet done any zooming or panning. [DONE]
  * Add a button to fit into view, this would then deselect the user interaction flag. [DONE]

* Make sure the columns & rows layout keeps all pictures within the visible area when layouting.

* Implement label rendering for columns & rows layout (change font size also somewhat)
  * Use a scratch buffered image the size of a text label area to do the rendering, also provides cutting.
  * Shorten too long picture names with ... in the middle of the picture name (if it ends with number), or in the end otherwise(?).

* Re-render pictures on parameter changes, show progressbar & stop button, stop previous render if properties changed while rendering

* Do not show previews during first second of calculation, if there is still more than ~50% left after that then show them

* Implement tiling arranger, shows pictures arranged randomly or according to specified tiling boundaries.
* Add ability to toggle arranger in the preview

* Clearer error reporting:
  * Human readable messages [DONE]
  * Multiline tooltip / send error report button
  * Error icon for statusbar


Effects
* Perlin noise effect [DONE]
* pass in and parse picture specific parameter values to the pixel calculator from the compiler
* Name passing in effects, system for effects to tell what variables they take and create (both at pixel calculation level and before loop level, or any level?)
* System for unique namespaces in effects

* Text input, parser checked generic function effect
  * Provide basic arithmetic and a nice set of standard math and interpolation etc utils
  * Also provide functions to sample existing image data at some offsets or positions, of the current picture or pictures passed in as params
  * Many other common effects can be implemented in terms of this one

* Multipicture effect, that pastes pictures from a generator over an area, with (straight edge) tiling support
* Also e.g. tile area with existing tiling pictures.

* Load picture effect, that loads a picture from a specified location and puts it on specific location
* Paste picture effect, uses other generator to generate pic that covers the whole area or a selected area,
  pass in parameters to the generator (implement by copying and overriding the specified params with new ones?)

* Nested effect, contain list of other effects

* Voronoi cells
* Manhattan cells / brickwall
* Ridged perlin etc if it needs anything special
* Add simplex noise, with gradient output as well.
* Stroke path effects for grass, fur etc.


Editor
* Generator editor ui and parameter property editor ui
* Undo & redo for property changes and other edits
* Color editor
* Channel name editor
* Float editors, select value or assign available variable to it

Project
* Load & save of project (using jaxb)


I/O
* Automatically create schema from data classes on build
* Export of image


Gradients & function shapes / 1D function
* Copy over earlier gradient code
* Gradient editor
* Smooth ramps in gradient?
  * Selectable ramp style, per point or globally?
    * Types: Linear, flat/bar graph, spline, (cosine)
  * Function expression to define function shape
* Predefined simple gradient objects with specific ramp shapes
* Have gradient double as general 1 -> N function shape editor










OLD Scala implementation
========================

* Float to Double cast error from ClassUtils in scalaprops when editing e.g. solid intensity numberfield.

* Make noise seamless

* After pasting a node, select it

* Separate windows with render preview
** For root node, or selected node
** Specify tasrget texture size
** Save button -> save to selected png file

* Render alpha using see-trhough checkerboard

* amplitude and offset controls to noise

* Context menu on cell: Copy, Paste, Cut, Delete

* Context menu on library: Copy (and remove for user library entry)

* Remove/disable the unintuitive select library, select target -paste system for library entries 

* Add drag support for library nodes to graph nodes -> repalce empty, on others show popup menu  Replace, Add After, Cancel

* Add drag support for graph nodes to graph nodes -> show popup menu  Move here, Copy here, Copy After, Move after, Swap, Cancel

* Add drag support for graph node to library, copy node to the library category

* Add right click menu to library, create new category

* Add automatic saving of the libray when it is modified, save into ~/.rasterfun/library.json or similar.  Automatically load from there on startup

* Add name of parameter node is used as to the bottom edge of the node (into own area?)

== More nodes ==

* Circle

* Block / square

* Tile node

* Voronoi

* Offset / translate


== Low priority ==

* Change title to Rasterfun <version>, set version to 0.1 beta

* Add export / import node in file menu

* Add about dialog with link to homepage etc

* Separate the incoming lines a bit on multi-input nodes

* Better color selector
 
* Clearer name to clamp attribute in blend
** Add description modified to properties that is used in tooltips etc

* Write some camel case -> space separated thingy for the property and node names


== Scalaprops ==
* Include miglayout in exported jar?
* Add copy method to bean
* [DONE] Generalize BeanEditorFactory to type [T] for easier use




